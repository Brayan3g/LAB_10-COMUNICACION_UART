/* UNIVERSIDAD DEL VALLE DE GUATEMALA
 * DEPARTAMENTO DE INGENIERIA ELCTRONICA & MECATRONICA
 * CURSO DE PROGRAMACION DE MICROCONTROLADORES
 * LABORATORIO No.10
 * 
 * File:   Main10.c
 * Author: BRAYAN GABRIEL GIRON GARCIA
 *
 * Created on 4 de mayo de 2021, 02:15 AM
 */
//-----------------------------------------------------------------------------------------------------------------------------------
// CONFIG1
//-----------------------------------------------------------------------------------------------------------------------------------
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

//-----------------------------------------------------------------------------------------------------------------------------------
// CONFIG2
//-----------------------------------------------------------------------------------------------------------------------------------
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//-----------------------------------------------------------------------------------------------------------------------------------
// LIBRERIAS
//-----------------------------------------------------------------------------------------------------------------------------------
#include <xc.h>
#include <stdint.h>             // TIPOS DE DATOS ESTANDAR Y OTROS.

//-----------------------------------------------------------------------------------------------------------------------------------
// DIRECTIVAS DEL COPILADOR
//-----------------------------------------------------------------------------------------------------------------------------------

//______________________________________________________________________________
// DECLARACION DE VARIABLES
//______________________________________________________________________________

//______________________________________________________________________________
// PROTOTIPOS DE FUNCIONES
//______________________________________________________________________________

void SETUP(void);                
void ENVIO_DE_DATOS(char CARACTER);
void ENVIO(char* MENSAJE);
void MENU(void);

//______________________________________________________________________________
// FUNCION DE INTERRUPCIONES
//______________________________________________________________________________

//______________________________________________________________________________
// FUNCION PRINCIPAL (MAIN & LOOP)
//______________________________________________________________________________

void main(void){
     SETUP();                 // LLAMAMOS A LA FUNCION DE CONFIGURACIONES. 
     MENU();                  // DESPLEGAMOS EL MENU.
     while(1){
         
         while(!RCIF);        // ESPERAMOS A RECIBIR UN DATO.
         char DATO = RCREG;   // ASIGNAMOS EL VALOR RECIBIDO A LA VARIABLE DATO.
         
         if(DATO == 49){      // VERIFICAMOS SI EL CARACTER RECIBIDO ES "1".
             ENVIO("\r ----> LAB_9 Comunicacion UART. \r\r");
             MENU();          // DESPLEGAMOS EL MENU NUEVAMENTE.
         }
         if(DATO == 50){      // VERIFICAMOS SI EL CARACTER RECIBIDO ES "2". 
             ENVIO("\r > Ingrese el nuevo valor para PORTA: \r");
             while(!RCIF);    // ESPERAMOS A RECIBIR UN DATO.
             PORTA = RCREG;   // ASIGNAMOS EL VALOR RECIBIDO AL PORTA.
             ENVIO("\r ----> El valor del PORTA ha sido modificado. \r\r\r");
             MENU();          // DESPLEGAMOS EL MENU NUEVAMENTE.
         }
         if(DATO == 51){      // VERIFICAMOS SI EL CARACTER RECIBIDO ES "3".
             ENVIO("\r > Ingrese el nuevo valor para PORTB: \r");
             while(!RCIF);    // ESPERAMOS A RECIBIR UN DATO.
             PORTB = RCREG;   // ASIGNAMOS EL VALOR RECIBIDO AL PORTB.
             ENVIO("\r ----> El valor del PORTB ha sido modificado. \r\r\r");
             MENU();          // DESPLEGAMOS EL MENU NUEVAMENTE.
         }
     }
}
//______________________________________________________________________________
// FUNCION PARA SEPARACION DEL MENSAJE A ENVIAR, EN CARACTERES INDIVIDUALES
//______________________________________________________________________________

void ENVIO(char* MENSAJE){   
    while(*MENSAJE  != '\0'){     // VERIFICAMOS SI HAY UN ESPACIO NULO.
        ENVIO_DE_DATOS(*MENSAJE); /* MANDAMOS A LA FUNCION DE ENVIO DE CARACTER,  
                                     EL CARACTER EN LA POSICION DEL VALOR DE LA 
                                     VARIABLE "MENSAJE". */ 
        MENSAJE ++;               // INCREMENTAMOS LA VARIABLE "MENSAJE".
    }
}
//______________________________________________________________________________
// FUNCION DE ENVIO CARACTER POR CARACTER
//______________________________________________________________________________

void ENVIO_DE_DATOS(char CARACTER){
    while(!TXIF);                 // ESPERAMOS A QUE SE ENVIE UN DATO.  
    TXREG = CARACTER;             // ENVIAMOS UN CARACTER. 
}
//______________________________________________________________________________
// FUNCION CON TEXTO DEL MENU
//______________________________________________________________________________

void MENU(void){
    ENVIO("\r QUE ACCION DESEA EJECUTAR ?\r\r");
    ENVIO(" 1.- Desplegar cadena de caracteres. \r");
    ENVIO(" 2.- Cambiar el valor del PORTA. \r");
    ENVIO(" 3.- Cambiar el valor del PORTB. \r");
}

//______________________________________________________________________________
// FUNCION DE CONFIGURACION
//______________________________________________________________________________

void SETUP(void){
    
//-------------------- CONFIGURACION DE ENTRADAS Y SALIDAS ---------------------
    ANSEL  = 0x00;           // Desactivamos las otras entradas analogicas.    
    ANSELH = 0x00;          
 
    TRISD  = 0x00;           // Declaramos el PORTD como salidas.
    TRISA  = 0x00;           // Declaramos el PORTA como salidas. 
    TRISB  = 0x00;           // Declaramos el PORTB como salidas.
    
    PORTD  = 0x00;           // Limpiamos los puertos.
    PORTA  = 0x00;
    PORTB  = 0x00;  
    
//------------------------ CONFIGURACION DE RELOJ A 8MHZ -----------------------
    OSCCONbits.IRCF2 = 1;
    OSCCONbits.IRCF1 = 1;
    OSCCONbits.IRCF0 = 1;
    OSCCONbits.SCS   = 1;
    
//--------------------------- CONFIGURACION DE TX & RX -------------------------
    TXSTAbits.SYNC    = 0;
    TXSTAbits.BRGH    = 0;
    BAUDCTLbits.BRG16 = 0;
    
    SPBRG  = 12;             // Seleccionamos la transmision y recpcion a 8 MHz.
    SPBRGH = 0;
    
    RCSTAbits.SPEN = 1;
    RCSTAbits.CREN = 1;      // Habilitamos la recepción de datos.
    TXSTAbits.TXEN = 1;      // Habilitamos la transmisión de datos. 
}
 
